{"version":3,"sources":["background.jpg","globalStyles.js","Form/Result/styled.js","Form/Result/index.js","Form/styled.js","Form/index.js","Form/useRatesData.js","Clock/styled.js","Clock/index.js","Clock/useCurrentDate.js","Container/index.js","App.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","background","StyledResult","styled","p","Result","result","startAmount","toFixed","endAmount","currency","StyledForm","form","Header","h1","theme","colors","primaryColor","Label","label","LabelText","span","FormField","input","Button","button","hoverColor","activeColor","Spinner","div","LoadingText","ErrorText","Form","useState","setCurrency","amount","setAmount","setResult","ratesData","state","setRatesData","useEffect","getRates","a","currenciesAPIUrl","Date","getTime","fetch","response","ok","Error","statusText","json","date","rates","console","log","error","setTimeout","useRatesDate","onSubmit","event","preventDefault","rate","calculateResult","value","onChange","target","placeholder","type","min","step","required","as","Object","keys","map","StyledClock","Clock","formattedDate","setDate","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","undefined","hour","minute","second","weekday","day","month","year","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65493cc9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.49bad222.jpg\";","import { createGlobalStyle } from \"styled-components\";\r\nimport background from \"./background.jpg\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Lato\", sans-serif;\r\n    font-size: 17px;\r\n    color: hsl(0, 0%, 15%);\r\n    background-color: hsl(0, 3%, 45%);\r\n    background-image: url(\"${background}\");\r\n    background-size: cover;\r\n    background-position:center;\r\n    background-blend-mode: overlay;\r\n  }\r\n\r\n  #root {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledResult = styled.p`\r\n  font-size: 20px;\r\n  word-break: break-word;\r\n`;","import { StyledResult } from \"./styled\";\r\n\r\nexport const Result = ({ result }) => {\r\n  if (result) {\r\n    return (\r\n      <StyledResult>\r\n        {result.startAmount.toFixed(2)}&nbsp;PLN =\r\n        <strong>\r\n          {\" \"}{result.endAmount.toFixed(2)}\r\n          &nbsp;{result.currency}\r\n        </strong>\r\n      </StyledResult>\r\n    )\r\n  }\r\n  return (\r\n    <StyledResult><br></br></StyledResult>\r\n  )\r\n};","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  text-align: center;\r\n`;\r\n\r\nexport const Header = styled.h1`\r\n  color: ${({ theme }) => theme.colors.primaryColor};\r\n  text-shadow: 1px 2px 5px hsl(0, 0%, 90%);\r\n  font-weight: 400;\r\n  text-transform: uppercase;\r\n  margin: 0 0 30px 0;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const LabelText = styled.span`\r\n  margin: 0 0 10px 0;\r\n  text-align: left;\r\n  display:inline-block;\r\n  max-width:80px;\r\n  width:100%;\r\n`;\r\n\r\nexport const FormField = styled.input`\r\n  border: solid 2px hsl(0, 5%, 65%);\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n  max-width:250px;\r\n  width:100%;\r\n\r\n  &:read-only {\r\n    background-color: hsla(0, 7%, 81%, 0.411);\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.primaryColor};\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border: solid 2px  ${({ theme }) => theme.colors.primaryColor};\r\n  text-shadow: 1px 1px 2px hsl(0, 0%, 20%);\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.1em;\r\n  border-radius: 3px;\r\n  width: 100%;\r\n  transition: background-color 0.3s, transform 0.3s;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.hoverColor};\r\n    transform: scale(1.02);\r\n  }\r\n\r\n  &:active {\r\n    background-color: ${({ theme }) => theme.colors.activeColor};\r\n  }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n    display: block;\r\n    margin:20px auto;\r\n    width: 60px;\r\n    height: 60px;\r\n    border: 7px solid #ddd;\r\n    border-left-color: ${({ theme }) => theme.colors.primaryColor};\r\n    border-right-color: ${({ theme }) => theme.colors.primaryColor};\r\n    border-radius: 50%;\r\n    animation: LoadingSpinner 1s linear infinite;\r\n\r\n    @keyframes LoadingSpinner {\r\n    to {transform: rotate(360deg);}\r\n    }\r\n`\r\n\r\nexport const LoadingText = styled.p`\r\n  font-size: 20px;\r\n  line-height:1.4;\r\n`\r\nexport const ErrorText = styled(LoadingText)`\r\n  color: hsl(346, 97%, 46%);\r\n`","import { useState } from \"react\";\r\nimport { Result } from \"./Result\";\r\nimport {\r\n  StyledForm,\r\n  Header,\r\n  Label,\r\n  LabelText,\r\n  FormField,\r\n  Button,\r\n  Spinner,\r\n  LoadingText,\r\n  ErrorText\r\n} from \"./styled\";\r\nimport { useRatesDate } from \"./useRatesData\";\r\n\r\nexport const Form = () => {\r\n  const [currency, setCurrency] = useState(\"USD\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [result, setResult] = useState();\r\n  const ratesData = useRatesDate();\r\n\r\n  const calculateResult = () => {\r\n    const rate = ratesData.rates[currency];\r\n\r\n    setResult({\r\n      currency,\r\n      startAmount: +amount,\r\n      endAmount: amount * rate\r\n    });\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult();\r\n  };\r\n\r\n  return (\r\n\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Header>Przelicznik walut</Header>\r\n\r\n      {\r\n        (() => {\r\n          if (ratesData.state === \"error\") {\r\n            return (\r\n              <ErrorText>\r\n                Ups...coś poszło nie tak. &#128531; <br />\r\n                Sprawdź, czy masz połączenie z internetem. <br />\r\n                Jeśli tak, spróbuj ponownie później.\r\n              </ErrorText>\r\n            )\r\n          } else if (ratesData.state !== \"success\") {\r\n            return (\r\n              <>\r\n                <LoadingText>Trwa ładowanie kursów walut z Europejskiego Banku Centralnego.</LoadingText>\r\n                <Spinner></Spinner>\r\n              </>\r\n            )\r\n          } else {\r\n            return (\r\n              <>\r\n                <p>\r\n                  <Label>\r\n                    <LabelText>Kwota*:</LabelText>\r\n                    <FormField\r\n                      value={amount}\r\n                      onChange={(event) => setAmount(event.target.value)}\r\n                      placeholder=\"Kwota w PLN\"\r\n                      type=\"number\"\r\n                      min=\"0.01\"\r\n                      step=\"0.01\"\r\n                      required\r\n                    />\r\n                  </Label>\r\n                </p>\r\n                <p>\r\n                  <Label>\r\n                    <LabelText>Waluta*:</LabelText>\r\n                    <FormField as=\"select\"\r\n                      value={currency}\r\n                      onChange={(event) => setCurrency(event.target.value)}\r\n                      required>\r\n                      {(Object.keys(ratesData.rates)).map(currency => (\r\n                        <option value={currency} key={currency}>{currency}</option>\r\n                      ))}\r\n                    </FormField>\r\n                  </Label>\r\n                </p>\r\n                <p>\r\n                  <Button>Przelicz!</Button>\r\n                </p>\r\n                <Result result={result} />\r\n                <p>\r\n                  * - pola wymagające uzupełniania\r\n                </p>\r\n                <p>\r\n                  Kursy walut pobierane są z Europejskiego Banku Centralnego. <br />\r\n                  Aktualne na dzień: <strong>{ratesData.date}</strong>\r\n                </p>\r\n              </>\r\n            )\r\n          }\r\n        })()\r\n      }\r\n    </StyledForm>\r\n  );\r\n};","import { useState, useEffect } from \"react\";\r\n\r\nexport const useRatesDate = () => {\r\n  const [ratesData, setRatesData] = useState({ state: \"loading\" });\r\n\r\n  useEffect(() => {\r\n    const getRates = async () => {\r\n      try {\r\n        const currenciesAPIUrl = [\r\n          `https://api.exchangerate.host/latest?base=PLN&symbols=EUR,USD,CHF,GBP,JPY,CZK,AUD,CAD&v=${new Date().getTime()}`,\r\n          \"./src/Form/ratesDataCash.json\"\r\n        ];\r\n        const response = await fetch(currenciesAPIUrl[0]);\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n\r\n        const { date, rates } = await response.json();\r\n        console.log({ date, rates });\r\n\r\n        if (!rates) {\r\n          throw new Error(response.statusText);\r\n        }\r\n\r\n        setRatesData({\r\n          date,\r\n          rates,\r\n          state: \"success\"\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error(\"Sth bad\", error);\r\n        setRatesData({ state: \"error\" });\r\n      }\r\n    }\r\n    setTimeout(getRates, 2_000);\r\n  }, []);\r\n\r\n  return ratesData;\r\n}\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledClock = styled.div`\r\n  color:#555555;\r\n  font-family: 'Roboto Mono', monospace;\r\n  font-size:12px;\r\n  text-align: right;\r\n  margin:0 0 20px 0;\r\n`;","import { StyledClock } from \"./styled\";\r\nimport { useCurrentDate } from \"./useCurrentDate\";\r\n\r\nexport const Clock = () => {\r\n  const date = useCurrentDate();\r\n\r\n  const formattedDate = date.toLocaleString(\r\n    undefined,\r\n    {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      weekday: \"long\",\r\n      day: \"numeric\",\r\n      month: \"long\",\r\n      year: \"numeric\"\r\n    },\r\n  );\r\n\r\n  return (\r\n    <StyledClock> Dzisiaj jest{\" \"}{formattedDate}</StyledClock>\r\n  );\r\n}\r\n\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    }\r\n  }, []);\r\n\r\n  return date;\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  flex-basis: 700px;\r\n  margin: 20px;\r\n  padding: 40px;\r\n  border: solid 1px hsl(0, 5%, 88%);\r\n  border-radius: 10px;\r\n  background-color: white;\r\n  box-shadow: 0px 0px 30px black;\r\n`;","import { Form } from \"./Form\";\nimport { Clock } from \"./Clock\";\nimport { Container } from \"./Container\";\n\nfunction App() {\n  return (\n    <Container>\n      <Clock />\n      <Form />\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './globalStyles';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  colors: {\r\n    primaryColor: \"hsl(19, 87%, 50%)\",\r\n    hoverColor: \"hsl(19, 87%, 55%)\",\r\n    activeColor: \"hsl(19, 87%, 60%)\"\r\n  },\r\n}"],"sourceRoot":""}